QN-1
public class ArrayUtils {
    public static <T> void swapElements(T[] array, int index1, int index2) {
        if (index1 < 0 || index1 >= array.length || index2 < 0 || index2 >= array.length) {
            // Check if the indices are within valid range
            throw new IndexOutOfBoundsException("Invalid indices provided");
        }

        T temp = array[index1];
        array[index1] = array[index2];
        array[index2] = temp;
    }

    public static void main(String[] args) {
        Integer[] intArray = {1, 2, 3, 4, 5};
        System.out.println("Original Array: " + Arrays.toString(intArray));

        swapElements(intArray, 1, 3);
        System.out.println("After Swapping: " + Arrays.toString(intArray));
    }
}

QN-2
import java.util.ArrayList;
import java.util.List;

public class GenericStack<T> {
    private List<T> stack = new ArrayList<>();

    public void push(T item) {
        stack.add(item);
    }

    public T pop() {
        if (isEmpty()) {
            throw new IllegalStateException("Stack is empty.");
        }
        return stack.remove(stack.size() - 1);
    }

    public boolean isEmpty() {
        return stack.isEmpty();
    }

    public int size() {
        return stack.size();
    }

    public static void main(String[] args) {
        GenericStack<Student> studentStack = new GenericStack<>();
        studentStack.push(new Student("Alice"));
        studentStack.push(new Student("Bob"));
        studentStack.push(new Student("Charlie"));

        System.out.println("Student Stack:");
        while (!studentStack.isEmpty()) {
            Student student = studentStack.pop();
            System.out.println("Popped: " + student.getName());
        }

        GenericStack<Employee> employeeStack = new GenericStack<>();
        employeeStack.push(new Employee("John"));
        employeeStack.push(new Employee("Mary"));
        employeeStack.push(new Employee("David"));

        System.out.println("\nEmployee Stack:");
        while (!employeeStack.isEmpty()) {
            Employee employee = employeeStack.pop();
            System.out.println("Popped: " + employee.getName());
        }
    }
}

class Student {
    private String name;

    public Student(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }
}

class Employee {
    private String name;

    public Employee(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }
}

QN-3
import java.util.ArrayList;
import java.util.List;

public class GenericStack<T> {
    private List<T> stack = new ArrayList<>();

    public void push(T item) {
        stack.add(item);
    }

    public T pop() {
        if (isEmpty()) {
            throw new IllegalStateException("Stack is empty.");
        }
        return stack.remove(stack.size() - 1);
    }

    public boolean isEmpty() {
        return stack.isEmpty();
    }

    public int size() {
        return stack.size();
    }

    public static void main(String[] args) {
        GenericStack<?> studentStack = new GenericStack<>();
        studentStack.push(new Student("Alice"));
        studentStack.push(new Student("Bob"));
        studentStack.push(new Student("Charlie"));

        System.out.println("Student Stack:");
        while (!studentStack.isEmpty()) {
            Object student = studentStack.pop();
            if (student instanceof Student) {
                System.out.println("Popped: " + ((Student) student).getName());
            }
        }

        GenericStack<?> employeeStack = new GenericStack<>();
        employeeStack.push(new Employee("John"));
        employeeStack.push(new Employee("Mary"));
        employeeStack.push(new Employee("David"));

        System.out.println("\nEmployee Stack:");
        while (!employeeStack.isEmpty()) {
            Object employee = employeeStack.pop();
            if (employee instanceof Employee) {
                System.out.println("Popped: " + ((Employee) employee).getName());
            }
        }
    }
}

class Student {
    private String name;

    public Student(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }
}

class Employee {
    private String name;

    public Employee(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }
}
